{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/foundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.26;\r\n import \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\r\ncontract foundMe {\r\n    //众筹合约\r\n    // 1. 创建一个收款函数\r\n    // 2. 记录投资人并且查看\r\n    // 3. 在锁定期内，达到目标值，生产商可以提款\r\n    // 4. 在锁定期内，没有达到目标值，投资人在锁定期以后退款\r\n\r\n    mapping(address => uint) public founderTomount; //投资人记录\r\n    address[] private founders; //投资人\r\n    uint256 private targetMoney=50*1e18; //目标资金  100eth\r\n    address public owner; \r\n    uint256 private min_value = 50*1e18; //单次捐款最小金额 eth\r\n    uint256 public lockTime;  //锁定时间 单位秒\r\n    uint256 public startTime; //开始时间\r\n    bool foundStatus = false; //提款状态\r\n    AggregatorV3Interface private priceFeed=AggregatorV3Interface(0x694AA1769357215DE4FAC081bf1f309aDC325306); //\r\n  \r\n    constructor(uint256 _lockTime) {\r\n        owner = msg.sender;\r\n        lockTime = _lockTime;\r\n        startTime = block.timestamp;\r\n    }\r\n\r\n    function found() external payable {\r\n        //收款捐赠\r\n        // require(getRate(msg.value)>= min_value, \"please send more eth\");\r\n        require(msg.value>= min_value, \"please send more eth\");//这里不使用usd转化，方便比较理解\r\n        \r\n        require(block.timestamp < startTime + lockTime, \"time is expired\");\r\n        founderTomount[msg.sender] = msg.value;\r\n        founders.push(msg.sender);\r\n    }\r\n\r\n    function getFound() external onlyOnwer timeOver {\r\n        //提款\r\n        require(address(this).balance >= targetMoney, \"target not reached\");\r\n        require(!foundStatus, \"you had founded\");\r\n        (bool success, ) = payable(msg.sender).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n        require(success, \"transaction is failed\");\r\n        for(uint256 i=0;i<founders.length;i++){//账户归零\r\n            founderTomount[founders[i]]=0;\r\n        }\r\n        founders=new address[](0);\r\n        foundStatus = true;\r\n    }\r\n\r\n    function getBalancOfAddr(address addr) public view returns (uint256) {\r\n        //根据账户查询捐款金额\r\n        return founderTomount[addr];\r\n    }\r\n\r\n    function reFound() external timeOver {\r\n        //退款\r\n        (bool success, ) = payable(msg.sender).call{\r\n            value: founderTomount[msg.sender]\r\n        }(\"\");\r\n        require(success, \"transaction is failed\");\r\n        founderTomount[msg.sender] = 0;\r\n        for(uint256 i=0;i<founders.length;i++){\r\n            if(founders[i]==msg.sender){\r\n                    founders[i]=founders[founders.length];\r\n                    break;\r\n            }\r\n        }\r\n        founders.pop();\r\n        \r\n    }\r\n\r\n    modifier onlyOnwer() {\r\n        //权限控制 只有合约部署者\r\n        require(msg.sender == owner, \"you are not owner\");\r\n        _;\r\n    }\r\n    modifier timeOver() {\r\n        //时间控制\r\n        require(block.timestamp > startTime + lockTime, \"time is over\");\r\n        _;\r\n    }\r\n    function getFounders() public view returns(address[] memory){\r\n        return founders;\r\n    }\r\n    function getTargetMoney() public view returns(uint256){\r\n        return targetMoney;\r\n    }\r\n    function getPrice() internal pure  returns(uint256){\r\n            // (,int256 price,,,)=priceFeed.latestRoundData(); //1eth与美元的价格比例 1eth : 3000*10*8\r\n            int256 price =3000*10**8;\r\n\r\n            return uint256(price*1e10); //这里转化为1wei对应的美元价格   10*18 wei :3000*10**18   合约程序中默认都是wei单位\r\n    }\r\n    function getRate(uint256 amount) public pure  returns(uint256){ //计算传入的eth对应的美元价格 amount单位eth\r\n        uint256 price=getPrice();\r\n        uint256 ethPrice=(amount*price)/1e18;\r\n        return ethPrice;\r\n    }\r\n    function getBalance() public view returns(uint256){\r\n        return address(this).balance;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}